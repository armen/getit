#!/bin/sh
# vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker:
#
# Getit, simplified, yet powerful download manager
#
#   Author: Armen Baghumian <armen@OpenSourceClub.org>
#   Version: 0.1
#   License: There is no license, then you are free to do WHAT EVER YOU WANT with
#            this script
#

CONFIG="/etc/default/getitd.cfg"
RC="${HOME}/.getitrc"

# Read config file if it is present
[ -r $CONFIG ] && . $CONFIG

# Read getitrc file if it is present
[ -r $RC ] && . $RC

function status {

    running=`ps -A | grep getitd`
    echo

    if [ "$running" ] ; then
        if [ -f $QUEUE ] ; then

            in_progress_count=$CONCURRENT_DOWNLOADS
            total_urls=`wc -l ${QUEUE} | awk '{ print $1}'`
            total_completed_urls=`wc -l ${COMPLETED} | awk '{ print $1}'`

            if [ "$total_urls" -lt "$in_progress_count" ] ; then
                in_progress_count=$total_urls
            fi

            running=`grep --regexp="^\s*[^;#]" $QUEUE 2>/dev/null`
            if [ "$running" ] ; then
                printf " Downloading %d URLs from %d URLs and completed %d URLs until now." $in_progress_count $total_urls $total_completed_urls
                echo
                echo
            else
                echo " Stopped!, use \"getitctl start\" to start it again."
                echo
            fi

            cat $QUEUE | head --lines=$CONCURRENT_DOWNLOADS | while read row;
            do
                # ignore lines that have ; or # at the beginning
                row=`echo $row | sed --expression='s/^\s*[;#].*//'`

                # extract url, download_dir and limit_rate
                url=`echo $row | awk '{print $1}'`

                if [ $url ] ; then

                    extension=`echo $url | md5sum | awk '{print $1}'`
                    progress=`cat /tmp/getit.log.${extension} 2>/dev/null | sed --expression="s/\r/\n/g" | \
                             tail --quiet --lines=1 | grep --regexp="[0-9]\+%"`

                    if [ "$progress" ] ; then
                        echo " $url"
                        echo "   $progress"
                        echo
                    else
                        fully_retrieved=`grep "fully retrieved;" /tmp/getit.log.${extension} 2>/dev/null `

                        if [ "x$fully_retrieved" == "x" ] ; then
                            echo " $url"
                            echo "   Processing... hang on a second!, if this is a permanent error message, recheck the url or limit rate format."
                            echo
                        else
                            echo " $url"
                            echo "   100%  Nothing to do."
                            echo
                        fi
                    fi
                fi
            done
        else
            echo " Nothing to do!"
            echo
        fi
    else
        echo " Daemon is not running!, start the daemon first."
        echo
    fi
}

function cleanup_queue {

    if [ -f $QUEUE ] ; then
        # use temp file, we don't want to disturb inotifywait yet
        TMP_QUEUE="/tmp/getit.queue.txt"
        hash=`md5sum ${QUEUE} | awk '{print $1}'`
        cp $QUEUE $TMP_QUEUE
        cat $QUEUE | head --lines=$CONCURRENT_DOWNLOADS | while read row;
        do
            # ignore lines that have ; or # at the beginning
            row=`echo $row | sed --expression='s/^\s*[;#].*//'`

            # extract url, download_dir and limit_rate
            url=`echo $row | awk '{print $1}'`

            if [ $url ] ; then

                extension=`echo $url | md5sum | awk '{print $1}'`

                fully_retrieved=`grep "fully retrieved;" /tmp/getit.log.${extension} 2>/dev/null`

                if [ "x$fully_retrieved" != "x" ] ; then
                    already_there=`grep "$url" $COMPLETED 2>/dev/null`
                    if [ "x$already_there" == "x" ]; then
                        echo $row >> $COMPLETED
                    fi
                    url=`echo "$url" | sed "s,/,\\\\\\\\\\/,g"`
                    sed --in-place "/^\s*${url}/d" $TMP_QUEUE
                else
                    progress=`cat /tmp/getit.log.${extension} 2>/dev/null | sed --expression="s/\r/\n/g" | \
                             tail --quiet --lines=1 | grep --regexp="[0-9]\+%"`

                    if [ "x$progress" == "x" ] ; then
                        # there is a problem in url
                        # move it at the end of queue. so we can download other files
                        url=`echo "$url" | sed "s,/,\\\\\\\\\\/,g"`
                        sed --in-place "/^\s*${url}/d" $TMP_QUEUE
                        echo "$row" >> $TMP_QUEUE
                    fi
                fi
            fi
        done

        new_hash=`md5sum ${QUEUE} | awk '{print $1}'`
        tmp_hash=`md5sum ${TMP_QUEUE} | awk '{print $1}'`

        if [ $new_hash == $hash ] ; then
            if [ $tmp_hash != $hash ] ; then
                mv $TMP_QUEUE $QUEUE
            fi
        else
            # queue file has been changed do the process again
            cleanup_queue
        fi
    fi
}

case "$1" in
    push|p)
        echo -e "$2 $3 $4" | cat - $QUEUE >> /tmp/getit.queue
        cp /tmp/getit.queue $QUEUE
        rm -f /tmp/getit.queue
    ;;
    queue|q)
        echo "$2 $3 $4" >> $QUEUE
	;;
    stop|suspend|sp)
        running=`grep --regexp="^\s*[^;#]" $QUEUE 2>/dev/null`
        if [ "$running" ] ; then
            sed --in-place --expression="s/^/;/" $QUEUE
            echo "Stoped downloading."
        else
            echo "Already stoped!"
        fi
    ;;
    start|go)
        if [ "x`grep --regexp="^\s*[^;#]" $QUEUE 2>/dev/null`" == "x" ] ; then
            sed --in-place --expression="s/^;//" $QUEUE
            echo "Starting to download."
        else
            echo "Already downloading!"
        fi
	;;
    status|st)

        status
    ;;
    watch-status|ws)

        watch --interval=1 --no-title "getitctl status"
    ;;
    cleanup-queue)

        cleanup_queue
    ;;
    *)
	echo "Usage: getitctl queue|q url [download_dir] [limit_rate]"
    echo "       getitctl push|p url [download_dir] [limit_rate]"
    echo "       getitctl stop|suspend|sp"
    echo "       getitctl start|go"
    echo "       getitctl status|st"
    echo "       getitctl watch-status|ws"
    echo "       getitctl cleanup-queue"
	;;
esac
